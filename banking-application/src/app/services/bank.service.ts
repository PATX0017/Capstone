import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Account } from '../common/account'
import { Observable } from 'rxjs';


@Injectable({
  providedIn: 'root'
})
export class BankService {



  account!: Account;
  baseUrl: string = "http://localhost:8080/"

  constructor(private httpClient: HttpClient) { }

  //Method calls the server and returns a list of Accounts from the database.
  getAccountInfo(): Observable<Account[]> {
    return this.httpClient.get<Account[]>(this.baseUrl + "accounts");
  }
  //Method calls the server and sends the account number as a pramater. Returns an Observable account object that matches the account number in the database.
  getSpecificAccount(accNum: number): Observable<Account> {
    return this.httpClient.get<Account>(this.baseUrl + "account/" + accNum);
  }

  //method calls the server and sends an account object generated by the User on the View. Adds the account to the database.
  addAccount(account: Account) {
    return this.httpClient.post<Account>(this.baseUrl + "add_account", account).subscribe();
  }

  //method calls the server and sends amount and account object in order to add to the checkings balance of that account.
  depositCheckings(amount: number, account: Account) {
    return this.httpClient.patch<Account>(this.baseUrl + `deposit_checkings/${amount}`, account).subscribe();
  }

  //method calls the server and sends amount and account object in order to add to the savings balance of that account.
  depositSavings(amount: number, account: Account) {
    return this.httpClient.patch<Account>(this.baseUrl + `deposit_savings/${amount}`, account).subscribe();
  }

  //method calls the server and sends amount and account object in order to subtract from the savings balance of that account.
  withdrawCheckings(amount: number, account: Account) {
    return this.httpClient.patch<Account>(this.baseUrl + `withdraw_checkings/${amount}`, account).subscribe();
  }

  //method calls the server and sends amount and account object in order to subtract from the savings balance of that account.
  withdrawSavings(amount: number, account: Account) {
    return this.httpClient.patch<Account>(this.baseUrl + `withdraw_savings/${amount}`, account).subscribe();
  }
}

